// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/delivery/grpc/proto/blocking.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockingService_CheckURL_FullMethodName    = "/blocking.v1.BlockingService/CheckURL"
	BlockingService_GetStats_FullMethodName    = "/blocking.v1.BlockingService/GetStats"
	BlockingService_HealthCheck_FullMethodName = "/blocking.v1.BlockingService/HealthCheck"
)

// BlockingServiceClient is the client API for BlockingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockingServiceClient interface {
	CheckURL(ctx context.Context, in *CheckURLRequest, opts ...grpc.CallOption) (*CheckURLResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type blockingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockingServiceClient(cc grpc.ClientConnInterface) BlockingServiceClient {
	return &blockingServiceClient{cc}
}

func (c *blockingServiceClient) CheckURL(ctx context.Context, in *CheckURLRequest, opts ...grpc.CallOption) (*CheckURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckURLResponse)
	err := c.cc.Invoke(ctx, BlockingService_CheckURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockingServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, BlockingService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BlockingService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockingServiceServer is the server API for BlockingService service.
// All implementations must embed UnimplementedBlockingServiceServer
// for forward compatibility.
type BlockingServiceServer interface {
	CheckURL(context.Context, *CheckURLRequest) (*CheckURLResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedBlockingServiceServer()
}

// UnimplementedBlockingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockingServiceServer struct{}

func (UnimplementedBlockingServiceServer) CheckURL(context.Context, *CheckURLRequest) (*CheckURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckURL not implemented")
}
func (UnimplementedBlockingServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedBlockingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBlockingServiceServer) mustEmbedUnimplementedBlockingServiceServer() {}
func (UnimplementedBlockingServiceServer) testEmbeddedByValue()                         {}

// UnsafeBlockingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockingServiceServer will
// result in compilation errors.
type UnsafeBlockingServiceServer interface {
	mustEmbedUnimplementedBlockingServiceServer()
}

func RegisterBlockingServiceServer(s grpc.ServiceRegistrar, srv BlockingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlockingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockingService_ServiceDesc, srv)
}

func _BlockingService_CheckURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockingServiceServer).CheckURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockingService_CheckURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockingServiceServer).CheckURL(ctx, req.(*CheckURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockingService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockingServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockingService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockingServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockingService_ServiceDesc is the grpc.ServiceDesc for BlockingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blocking.v1.BlockingService",
	HandlerType: (*BlockingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckURL",
			Handler:    _BlockingService_CheckURL_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _BlockingService_GetStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _BlockingService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/delivery/grpc/proto/blocking.proto",
}
